package designpattern.action.mediator;

/**
 * The Class ZExample. 中介者模式， 把对象间的关系由森林结构变成星型结构
 * 定义一个中介对象来封装系列对象之间的交互。中介者使各个对象不需要显示地相互引用，从而使其耦合性松散，而且可以独立地改变他们之间的交互。
 * 
 * 使用终结者模式的场合
 * 
 * 1.一组定义良好的对象，现在要进行复杂的通信。
 * 
 * 2.定制一个分布在多个类中的行为，而又不想生成太多的子类。
 * 
 * 可以看出，中介对象主要是用来封装行为的，行为的参与者就是那些对象，但是通过中介者，这些对象不用相互知道。呵呵~~~
 * 
 * 使用中介者模式的优点：
 * 
 * 1.降低了系统对象之间的耦合性，使得对象易于独立的被复用。
 * 
 * 2.提高系统的灵活性，使得系统易于扩展和维护。
 * 
 * 使用中介者模式的缺点：
 * 
 * 中介者模式的缺点是显而易见的，因为这个“中介“承担了较多的责任，所以一旦这个中介对象出现了问题，那么整个系统就会受到重大的影响。
 * 
 * 这里以电脑为例，来说明中介者模式。
 * 电脑有很多配件，像CPU,内存，显卡，硬盘等，每个配件是独立设计的，有着自己的特性和功能，同时各配件之间又需要协作，来完成电脑的各种工作。
 * 这里主板就相当于中介者，它沟通了所有配件，协调这些配件的工作。每个配件都是可以替换的，使系统易于扩展和服用。
 * 主板协调所有配件，并提供各配件间的通信。
 * 
 * 
 * @date 2014-5-12 0:25:56
 * @author 宿晓斐
 * @version 1.0
 * @since jdk 1.6,common_tools_trunk 1.0
 */
public class ZExample {

	/**
	 * The main method.
	 * 
	 * @param args
	 *            the arguments
	 */
	public static void main(String[] args) {
		MainBoard mb = new MainBoard();
		mb.start();
		mb.stop();

	}

}
